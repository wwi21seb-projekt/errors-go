package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"path/filepath"
)

type CustomError struct {
	Message    string
	Code       string
	HttpStatus int
}

func main() {
	response, err := http.Get("https://raw.githubusercontent.com/wwi21seb-projekt/error-domain/main/errors.json")
	if err != nil {
		log.Fatal(err)
	}
	defer response.Body.Close()

	if response.StatusCode != http.StatusOK {
		log.Fatalf("failed to fetch errors.json: HTTP %d %s", response.StatusCode, response.Status)
	}

	var errors []CustomError
	if err := json.NewDecoder(response.Body).Decode(&errors); err != nil {
		log.Fatal(err)
	}

	outPath := filepath.Join("goerrors", "errors.go")
	dirPath := filepath.Dir(outPath)
	if err := os.MkdirAll(dirPath, 0755); err != nil {
		log.Fatal(err)
	}

	out, err := os.Create(outPath)
	if err != nil {
		log.Fatal(err)
	}
	defer out.Close()

	fmt.Println("Creating file at: ", outPath)

	_, _ = out.WriteString("// CODE GENERATED BY main.go - DO NOT EDIT\n")
	_, _ = out.WriteString("package goerrors\n\n")
	_, _ = out.WriteString("var (\n")
	for _, e := range errors {
		_, _ = out.WriteString(fmt.Sprintf("\t%s = &CustomError{\n\t\tMessage: \"%s\",\n\t\tCode: \"%s\",\n\t\tHttpStatus: %d,\n\t}\n", e.Code, e.Message, e.Code, e.HttpStatus))
	}
	_, _ = out.WriteString(")\n")
}
